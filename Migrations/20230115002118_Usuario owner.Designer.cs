// <auto-generated />
using System;
using Backend.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Backend.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20230115002118_Usuario owner")]
    partial class Usuarioowner
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Backend.Models.Actividades", b =>
                {
                    b.Property<int>("idActividad")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("actividad")
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.Property<int?>("usuarioidUsuario")
                        .HasColumnType("int");

                    b.HasKey("idActividad");

                    b.HasIndex("usuarioidUsuario");

                    b.ToTable("Actividades");
                });

            modelBuilder.Entity("Backend.Models.Clientes", b =>
                {
                    b.Property<int>("idClientes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("idUbicacion")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(35)");

                    b.Property<int?>("ubicacionidUbicacion")
                        .HasColumnType("int");

                    b.HasKey("idClientes");

                    b.HasIndex("ubicacionidUbicacion");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Backend.Models.Contacto", b =>
                {
                    b.Property<int>("idContacto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("UbicacionidUbicacion")
                        .HasColumnType("int");

                    b.Property<bool>("eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("idUbicacion")
                        .HasColumnType("int");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(35)");

                    b.Property<string>("sitio")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("telefono")
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("idContacto");

                    b.HasIndex("UbicacionidUbicacion");

                    b.ToTable("Contactos");
                });

            modelBuilder.Entity("Backend.Models.Credenciales", b =>
                {
                    b.Property<int>("idCredencial")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("clienteidClientes")
                        .HasColumnType("int");

                    b.Property<string>("contrasenia")
                        .HasColumnType("nvarchar(70)");

                    b.Property<bool>("eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(40)");

                    b.Property<int>("idCliente")
                        .HasColumnType("int");

                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.Property<int>("tipo")
                        .HasColumnType("int");

                    b.Property<int?>("usuarioidUsuario")
                        .HasColumnType("int");

                    b.HasKey("idCredencial");

                    b.HasIndex("clienteidClientes");

                    b.HasIndex("usuarioidUsuario");

                    b.ToTable("Credenciales");
                });

            modelBuilder.Entity("Backend.Models.Ubicacion", b =>
                {
                    b.Property<int>("idUbicacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("calle")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("ciudad")
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("colonia")
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("cp")
                        .HasColumnType("int");

                    b.Property<bool>("eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("estado")
                        .HasColumnType("nvarchar(25)");

                    b.Property<int>("numero")
                        .HasColumnType("int");

                    b.Property<string>("pais")
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("idUbicacion");

                    b.ToTable("Ubicaciones");
                });

            modelBuilder.Entity("Backend.Models.Usuarios", b =>
                {
                    b.Property<int>("idUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(35)");

                    b.Property<bool>("owner")
                        .HasColumnType("bit");

                    b.HasKey("idUsuario");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Backend.Models.Actividades", b =>
                {
                    b.HasOne("Backend.Models.Usuarios", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioidUsuario");

                    b.Navigation("usuario");
                });

            modelBuilder.Entity("Backend.Models.Clientes", b =>
                {
                    b.HasOne("Backend.Models.Ubicacion", "ubicacion")
                        .WithMany()
                        .HasForeignKey("ubicacionidUbicacion");

                    b.Navigation("ubicacion");
                });

            modelBuilder.Entity("Backend.Models.Contacto", b =>
                {
                    b.HasOne("Backend.Models.Ubicacion", "Ubicacion")
                        .WithMany()
                        .HasForeignKey("UbicacionidUbicacion");

                    b.Navigation("Ubicacion");
                });

            modelBuilder.Entity("Backend.Models.Credenciales", b =>
                {
                    b.HasOne("Backend.Models.Clientes", "cliente")
                        .WithMany()
                        .HasForeignKey("clienteidClientes");

                    b.HasOne("Backend.Models.Usuarios", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioidUsuario");

                    b.Navigation("cliente");

                    b.Navigation("usuario");
                });
#pragma warning restore 612, 618
        }
    }
}
